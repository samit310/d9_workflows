<?php

/**
 * @file
 * Provides an anonymous submission entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_theme().
 */
function d9_workflow_theme() {
  return [
    'anonymous_submission' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for anonymous submission templates.
 *
 * Default template: anonymous-submission.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the anonymous submission
 *     information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_anonymous_submission(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_cron().
 */
function d9_workflow_cron() {
  $rejected_entitys = \Drupal::database()->query("SELECT asfd.id FROM {anonymous_submission_field_data} asfd
                                        INNER JOIN {content_moderation_state_field_data} cmsf
                                        ON asfd.id = cmsf.content_entity_id
                                        WHERE cmsf.moderation_state = 'reject'
                                        LIMIT 10")->fetchAllAssoc('id');
  if (!empty($rejected_entitys)) {
    $queue = \Drupal::queue('d9_workflow_rejected_anonymous_submission_deletion');
    foreach ($rejected_entitys as $rejected_entity) {
      $queue->createQueue();
      $queue->createItem($rejected_entity->id);
      \Drupal::logger('d9_workflow_cron')->info(t('The queue Has been created for %id.', ['%id' => $rejected_entity->id]));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function d9_workflow_anonymous_submission_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $result = AccessResult::neutral();
  if ($operation == 'view') {
    if ($account->isAnonymous() && $entity->moderation_state->value != 'published') {
      $result = AccessResult::forbidden();
    }
  }
  return $result;
}
